import java.nio.file.Paths

buildscript {
    repositories {
        jcenter()
        maven() {
            url 'https://oss.jfrog.org/artifactory/oss-snapshot-local'
        }
    }

    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.x-SNAPSHOT"
    }
}
//Global Properties
ext {
    //version for external libraries
    slf4j_version = '1.7.13'
    gson_version = '2.6.2'
    json_version = '1.0'
    json_impl_version = "1.0.4"
    math3_version = '3.+'
    glpk_version = '1.7.0'//'1.0.37'
    jewelcli_version = '0.8.+'

    gurobi_version = '6.+'

    fingeridVersion = "1.0.4-SNAPSHOT"

    graphUtils_version = '1.1'

    //locations of runtime libraries
    runtimeClasspath = '${GUROBI_HOME}/lib/gurobi.jar'

    //release branch auto detection
    gitBranch = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
    logger.lifecycle("Current Branch: $gitBranch")

    releaseBranch = 'release'

    internal = { String modulePath, version ->
        if (project.gitBranch.equals(project.releaseBranch)) {
            return "de.unijena.bioinf.ms:${modulePath.split(':').takeRight(1)[0]}:$version"
        } else {
            return project("$modulePath")
        }
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: "com.jfrog.artifactory"

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    version = '3.1.4-SNAPSHOT'
    group = 'de.unijena.bioinf.ms'

    repositories {
        mavenLocal()
        mavenCentral()
        /*maven {
            url "http://bio.informatik.uni-jena.de/artifactory/repo" //todo deprecated
        }*/
        maven {
            url "https://bio.informatik.uni-jena.de/repository/local"
        }
        maven {
            url "http://www.ebi.ac.uk/intact/maven/nexus/content/repositories/ebi-repo"
        }
        maven {
            url "https://www.xypron.de/repository" //glpk repo
        }
    }

    dependencies {
        compile 'net.sf.trove4j:trove4j:3.0.3'
        compile 'com.google.guava:guava:18.0'

        testCompile group: 'junit', name: 'junit', version: '4.+'
    }

    //to build shadowJar without provided libs
    configurations {
        provided
        compileOnly.extendsFrom provided
    }

    /*Define artifacts (for maven install --> is also used by artifactory)*/
    task sourceJar(type: Jar) {
        group = 'build'
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar (type: Jar, dependsOn: javadoc) {
        group = 'build'
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                setArtifacts([jar, sourceJar/*, javadocJar*/]) //todo Fix JavaDoc
            }
            mavenPomOnly(MavenPublication) {
                from components.java
                setArtifacts([])
            }
        }
    }

    artifactory {
        contextUrl = 'https://bio.informatik.uni-jena.de/repository/'
        publish {
            repository {
                if ("${version}".endsWith('-SNAPSHOT'))
                    repoKey = 'libs-snapshot-local'
                else
                    repoKey = 'libs-release-local'
                Properties properties = new Properties()
                File propertiesFile = Paths.get(System.properties['user.home'], 'artifactory.properties').toFile()
                propertiesFile.withInputStream {
                    properties.load(it)
                }

                username = properties['username']
                password = properties['password']
            }
        }
    }
    artifactoryPublish.dependsOn 'generatePomFileForMavenPomOnlyPublication'
    artifactoryPublish.dependsOn 'generatePomFileForMavenJavaPublication'
    artifactoryPublish.dependsOn 'jar'
//    artifactoryPublish.dependsOn 'javadocJar'
    artifactoryPublish.dependsOn 'sourceJar'
}


/*publishing {
    publications {
        mavenJava(MavenPublication) {
            setArtifacts([])
        }
    }
}*/










