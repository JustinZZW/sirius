import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id "com.jfrog.artifactory" version "4.3.0"
}

//Global Properties
ext {
    //version for external libraries
    slf4j_version = '1.7.13'
    gson_version = '2.6.2'
    json_version = '1.0'
    json_impl_version = "1.0.4"
    math3_version = '3.+'
    glpk_version = '1.7.0'//'1.0.37'
    glpk_lib_version = '4.60'


    jewelcli_version = '0.8.+'

    gurobi_version = '6.5.1'

    fingeridVersion = "1.0.6-SNAPSHOT"

    graphUtils_version = '1.1'

    //locations of runtime libraries
    runtimeClasspath = '${GUROBI_HOME}/lib/gurobi.jar'
    gurobiExclude = "gurobi-*-${gurobi_version}.jar"

    //release branch auto detection
    gitBranch = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
    logger.lifecycle("Current Branch: $gitBranch")

    releaseBranch = 'release'
}

allprojects {
    apply plugin: "com.jfrog.artifactory"
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7


    version = '3.2.1-SNAPSHOT'
    group = 'de.unijena.bioinf.ms'

    repositories {
        mavenLocal()
        mavenCentral()
        /*maven {
            url "http://bio.informatik.uni-jena.de/artifactory/repo" //todo deprecated
        }*/
        maven {
            url "https://bio.informatik.uni-jena.de/repository/local"
        }
        maven {
            url "http://www.ebi.ac.uk/intact/maven/nexus/content/repositories/ebi-repo"
        }
        maven {
            url "https://www.xypron.de/repository" //glpk repo
        }

        /*//to build shadowJar without provided libs
        configurations {
            provided
            compileOnly.extendsFrom provided
        }*/
    }

    dependencies {
        compile 'net.sf.trove4j:trove4j:3.0.3'
        compile 'com.google.guava:guava:18.0'

        testCompile group: 'junit', name: 'junit', version: '4.+'
    }

    task sourceJar(type: Jar) {
        group = 'build'
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        group = 'documentation'
        classifier = 'javadoc'
        from javadoc.destinationDir
    }


    publishing {
        publications {
            mavenJava(MavenPublication) {
                from project.components.java
                //adding submodules to pom
                pom.withXml {
                    if (!project.subprojects.isEmpty()) {
                        def modlules = asNode().appendNode('modules', '')
                        project.subprojects.each {
                            new Node(modlules, 'module', it.name)
                        }
                    }
                }
                setArtifacts([])
            }
        }
    }
}

def javaProjects() {
    subprojects.findAll { new File(it.projectDir, 'src').directory }
}

configure(javaProjects()) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
//                from project.components.java
                if (version.toString().endsWith('-SNAPSHOT'))
                    setArtifacts([jar, sourceJar])
                else
                    setArtifacts([jar, sourceJar, javadocJar])
            }
        }
    }
}

task downloadGLPK(type: Copy) {
    def glpkURL = new URL("https://bio.informatik.uni-jena.de/repository/list/dist-release-local/de/unijena/bioinf/glpk/glpk-${project.glpk_lib_version}.zip")
    project.ext.set("glpkPath", getBuildDir().toPath().resolve('tmp/glpk/').toFile())

    java.nio.file.Path dir = project.glpkPath.toPath().getParent()

    copy {
        println(dir.toString())
        dir.resolve('glpk').toFile().deleteDir()
        Files.createDirectories(dir)

        def glpkZipFile = Paths.get('glpk.zip');
        def file = dir.resolve(glpkZipFile).newOutputStream()
        file << glpkURL.openStream()
        file.close()

        from zipTree(dir.resolve(glpkZipFile).toFile())
        into dir.toFile()
    }
}

//artifactoryPublish.skip = true
artifactory {
    contextUrl = 'https://bio.informatik.uni-jena.de/repository/'
    publish {
        repository {
            if (version.toString().endsWith('-SNAPSHOT'))
                repoKey = 'libs-snapshot-local'
            else
                repoKey = 'libs-release-local'
            Properties properties = new Properties()
            File propertiesFile = Paths.get(System.properties['user.home'], 'artifactory.properties').toFile()
            propertiesFile.withInputStream {
                properties.load(it)
            }

            username = properties['username']
            password = properties['password']
        }
        defaults {
            publications('mavenJava')
        }
    }
}

